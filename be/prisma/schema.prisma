// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "extensions"), vector(schema: "extensions")]
}

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  password        String
  name            String
  role            String    @default("user") // "user" or "admin"
  resetToken      String?
  resetTokenExpiry DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  websites        Website[]
  
  @@map("users")
}

model Website {
  id            Int       @id @default(autoincrement())
  customerId    String
  domain        String
  name          String?
  createdAt     DateTime  @default(now())
  lastCrawledAt DateTime?
  status        String    @default("pending")
  maxPages      Int?      @default(100)
  updatedAt     DateTime  @updatedAt

  Pages            Page[]
  ChatInteractions ChatInteraction[]
  customer        User     @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@unique([customerId, domain])
}

model Page {
  id            String       @id @default(uuid())
  websiteId     Int
  url           String    @unique
  title         String?
  lastCrawledAt DateTime?
  contentHash   String? 
  status        String    @default("pending")
  updatedAt     DateTime  @updatedAt

  Website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  Chunks  Chunk[]

  @@unique([websiteId, url])
}

model Chunk {
  id           String      @id @default(uuid())
  pageId       String
  chunkIndex   Int
  text         String
  tokenCount   Int?
  sectionTitle String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime  @updatedAt

  Page       Page        @relation(fields: [pageId], references: [id], onDelete: Cascade)
  Embeddings Embedding[]

  @@unique([pageId, chunkIndex])
}

model Embedding {
  id         String                         @id @default(uuid())
  chunkId    String
  modelName  String?
  dimensions Int
  embedding  Unsupported("vector(384)")?
  createdAt  DateTime @default(now())
  updatedAt  DateTime  @updatedAt

  Chunk Chunk @relation(fields: [chunkId], references: [id], onDelete: Cascade)

  @@unique([chunkId, modelName])
}

model ChatInteraction {
  id         String      @id @default(uuid())
  websiteId  Int
  sessionId  String?
  query      String
  response   String
  chunksUsed Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime  @updatedAt

  Website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)
}
