// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "extensions"), vector(schema: "extensions")]
}

model Website {
  id            Int       @id @default(autoincrement())
  customerId    String
  domain        String
  name          String?
  createdAt     DateTime  @default(now())
  lastCrawledAt DateTime?
  status        String    @default("pending")
  maxPages      Int?      @default(100)

  Pages            Page[]
  ChatInteractions ChatInteraction[]

  @@unique([customerId, domain])
}

model Page {
  id            String       @id @default(uuid())
  websiteId     Int
  url           String    @unique
  title         String?
  lastCrawledAt DateTime?
  contentHash   String? 
  status        String    @default("pending")

  Website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  Chunks  Chunk[]

  @@unique([websiteId, url])
}

model Chunk {
  id           String      @id @default(uuid())
  pageId       String
  chunkIndex   Int
  text         String
  tokenCount   Int?
  sectionTitle String?
  createdAt    DateTime @default(now())

  Page       Page        @relation(fields: [pageId], references: [id], onDelete: Cascade)
  Embeddings Embedding[]

  @@unique([pageId, chunkIndex])
}

model Embedding {
  id         String                         @id @default(uuid())
  chunkId    String
  modelName  String?
  dimensions Int
  embedding  Unsupported("vector(384)")?

  createdAt DateTime @default(now())

  Chunk Chunk @relation(fields: [chunkId], references: [id], onDelete: Cascade)

  @@unique([chunkId, modelName])
}

model ChatInteraction {
  id         String      @id @default(uuid())
  websiteId  Int
  sessionId  String?
  query      String
  response   String
  chunksUsed Json
  createdAt  DateTime @default(now())

  Website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)
}
